---
name: Build RPM pipeline
on:
  workflow_call:
    inputs:
      target-architecture:
        description: 'What is the architecture we want to build for'
        required: true
        type: string
      build-version:
        description: 'What is the version used to build and tag the RPMs'
        required: true
        type: string
      release-version:
        description: 'What is the release version used to build and tag the RPMs'
        required: true
        type: string
      tag:
        description: 'The tag used to checkout the correct version of source code'
        required: false
        type: string
        default: ''

jobs:
  parsing:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.params.outputs.name }}
    steps:

      - uses: actions/checkout@v4
        with:
          repository: alumet-dev/packaging
          fetch-tags: 'true'
          ref: 'main'
          path: 'packaging'

      - name: Parse Alumet package name
        id: params
        run: |
          name=$(awk '/Name/ { print $2; exit }' packaging/rpm/specs/alumet.spec)
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "Pipeline will build [$name] in version [${{ inputs.build-version }}] for the architecture [${{ inputs.target-architecture }}]" >> $GITHUB_STEP_SUMMARY

  packaging:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - parsing
    strategy:
      fail-fast: false
      matrix:
        os:
          - {name: fc40, base-image: fedora:40}
          - {name: fc41, base-image: fedora:41}
          - {name: fc42, base-image: fedora:42}
          - {name: ubi8.3, base-image: registry.access.redhat.com/ubi8/ubi:8.3}
          - {name: ubi9.5, base-image: registry.access.redhat.com/ubi9/ubi:9.5}
    env:
      name: ${{ needs.parsing.outputs.name }}
    container:
      image: ${{ matrix.os.base-image }}
    steps:

      - uses: actions/checkout@v4
        with:
          repository: alumet-dev/packaging
          fetch-tags: 'true'
          ref: 'ci/create-rpm-package'
          path: 'packaging'

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  | sh -s -- -y

      - name: Install RPM on Fedora
        if: contains(matrix.os.base-image, 'fedora')
        run: sudo dnf install -y rpm-build cargo-rpm-macros openssl-devel

      - name: Install RPM on other than Fedora
        if: ${{ ! contains(matrix.os.base-image, 'fedora') }}
        run: |
          yum install -y --allowerasing unzip rpm-build openssl-devel curl gcc

      - name: Setup for alumet
        run: |
          mkdir -p alumet
          mkdir -p /etc/alumet

      - name: Checkout alumet repo
        uses: actions/checkout@v4
        with:
          repository: alumet-dev/alumet
          path: "alumet"
          ref: '${{ inputs.tag }}'

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-targets: "alumet-agent"

      - name: Build RPM package
        id: build-rpm-package
        env:
          build_dir: "$(pwd)/build"
        run: |
          export PATH=$PATH:$HOME/.cargo/bin/
          mkdir -p ${{ env.build_dir }}/SOURCES
          tar --exclude=".[^/]*" --exclude="./build" --transform 's|.|alumet|' -zcvf ${{ env.build_dir }}/SOURCES/alumet-agent.tar.gz .
          rpmbuild -ba -vv --define "_topdir ${{ env.build_dir }}" --define "release ${{ inputs.release-version }}" --define "osr ${{ matrix.os.name }}" --define "version ${{ inputs.build-version }}" --define "arch ${{ inputs.target-architecture }}" packaging/rpm/specs/alumet.spec

      - name: Upload artifact alumet-agent
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name }}-${{ inputs.build-version }}-${{ inputs.release-version }}.${{ matrix.os.name }}.${{ inputs.target-architecture }}.rpm
          path: |
            ./build/RPMS/${{ inputs.target-architecture }}/${{ env.name }}-${{ inputs.build-version }}-${{ inputs.release-version }}.${{ matrix.os.name }}.${{ inputs.target-architecture }}.rpm

  testing:
    runs-on: ubuntu-latest
    needs:
      - packaging
    strategy:
      fail-fast: false
      matrix:
        os:
          - {name: fc40, base-image: fedora:40}
          - {name: fc41, base-image: fedora:41}
          - {name: fc42, base-image: fedora:42}
          - {name: ubi8.3, base-image: registry.access.redhat.com/ubi8/ubi:8.3}
          - {name: ubi9.5, base-image: registry.access.redhat.com/ubi9/ubi:9.5}
    container:
      image: ${{ matrix.os.base-image }}
      options: --cap-add=SYS_NICE --cap-add=PERFMON

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'alumet-dev/packaging'
          fetch-depth: 1
          path: 'packaging'
          ref: 'main'

      - name: Download RPM artifact
        id: download_rpm
        uses: actions/download-artifact@v4
        with:
          pattern: '**/*${{ matrix.os.name }}*.rpm'
          path: ./rpm
          merge-multiple: true

      - name: Install systemd on Fedora
        if: contains(matrix.os.base-image, 'fedora')
        run: |
          dnf install -y systemd

      - name: Install RPMs
        run: |
          dnf install -y ${{ steps.download_rpm.outputs.download-path }}/*.rpm

      - name: Install Goss
        run: |
          curl -fsSL https://goss.rocks/install | sh

      - name: Run Goss tests
        id: goss-tests
        run: |
          set -o pipefail
          goss -g packaging/.github/goss_validate.yaml validate --format documentation | tee goss-results-rpm-${{ matrix.os.name }}.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload goss report
        if: >-
          always() &&
          steps.goss-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: goss-results-rpm-${{ matrix.os.name }}.txt
          path: |
            ./goss-results-rpm-${{ matrix.os.name }}.txt
