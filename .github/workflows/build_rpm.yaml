---
name: Build RPM pipeline
on:
  workflow_call:
    inputs:
      arch:
        description: "Architecture we want to build for"
        required: true
        type: string

      version:
        description: "Application version (version of the alumet agent)"
        required: true
        type: string

      release-version:
        description: "Package release number (increase it when you update the package with the same app version)"
        required: true
        type: string

      tag:
        description: "The tag used to checkout the correct version of source code"
        required: false
        type: string
        default: 'main'

      rust-version:
        description: "Version of Rust to compile Alumet with"
        type: string
        default: '1.85.1'

jobs:
  rpm-packaging:
    runs-on: ${{ inputs.arch == 'x86_64' && 'ubuntu-latest' || inputs.arch == 'aarch64' && 'ubuntu-24.04-arm'}}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os:
          - {name: fc40, base-image: fedora:40}
          - {name: fc41, base-image: fedora:41}
          - {name: fc42, base-image: fedora:42}
          - {name: ubi8.3, base-image: registry.access.redhat.com/ubi8/ubi:8.3}
          - {name: ubi9.5, base-image: registry.access.redhat.com/ubi9/ubi:9.5}
    env:
      pkg_name: alumet-agent
    container:
      image: ${{ matrix.os.base-image }}
    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          dnf install --setopt=install_weak_deps=False -y nodejs sudo

      # replace some forbidden characters with ~
      # also replace - by ~ because we want 1.2.3-defbcda to be sorted BEFORE 1.2.3
      - name: Normalize version number
        run: |
          export PKG_VERSION=$(echo ${{ inputs.version }} | sed 's/[_-]/~/g')
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
          echo "PKG_VERSION=$PKG_VERSION"

      - uses: actions/checkout@v4
        with:
          repository: alumet-dev/packaging
          fetch-tags: true
          path: 'packaging'
          fetch-depth: 1

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  | sh -s -- -y --profile minimal --default-toolchain ${{ inputs.rust-version }}

      - name: Install Fedora dependencies
        if: contains(matrix.os.base-image, 'fedora')
        run: sudo dnf install --setopt=install_weak_deps=False -y rpm-build openssl-devel gcc git

      - name: Install non-Fedora dependencies
        if: ${{ ! contains(matrix.os.base-image, 'fedora') }}
        run: |
          yum install -y --allowerasing unzip rpm-build openssl-devel curl gcc git

      - name: Setup for alumet sources
        run: mkdir -p alumet

      - name: Checkout alumet repo
        uses: actions/checkout@v4
        with:
          repository: alumet-dev/alumet
          path: "alumet"
          ref: '${{ inputs.tag }}'
          fetch-depth: 1
          fetch-tags: true

      - name: Compile Alumet agent
        working-directory: alumet
        run: |
          . "$HOME/.cargo/env"
          bin=$(pwd)/bin
          mkdir "$bin"
          CARGO_TARGET_DIR="$bin" ALUMET_AGENT_RELEASE=true RUSTFLAGS="-Awarnings" cargo build --release -p alumet-agent
          cp "$bin/release/alumet-agent" ../packaging/rpm/SOURCES/alumet-agent

      - name: Build RPM package
        id: build-rpm-package
        env:
          build_dir: "$(pwd)/build"
          source_dir: "$(pwd)/SOURCES"
        working-directory: packaging/rpm
        run: |
          rpmbuild -bb -vv --define "_topdir ${{ env.build_dir }}" --define "_sourcedir ${{ env.source_dir }}" --define "_libdir /usr/lib" --define "version ${{ env.PKG_VERSION }}" --define "release ${{ inputs.release-version }}" --define "osr ${{ matrix.os.name }}" --define "arch ${{ inputs.arch }}" SPECS/alumet.spec
          export FILENAME="${{ env.pkg_name }}-${{ env.PKG_VERSION }}-${{ inputs.release-version }}.${{ matrix.os.name }}.${{ inputs.arch }}.rpm"
          echo "PACKAGE_FILENAME=$FILENAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_PATH=$(pwd)/build/RPMS/${{ inputs.arch }}/$FILENAME" >> $GITHUB_OUTPUT

      - name: Upload artifact alumet-agent
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-rpm-package.outputs.PACKAGE_FILENAME }}
          path: ${{ steps.build-rpm-package.outputs.PACKAGE_PATH }}
          compression-level: 0  # the package is already compressed

  rpm-testing:
    runs-on: ${{ inputs.arch == 'x86_64' && 'ubuntu-latest' || inputs.arch == 'aarch64' && 'ubuntu-24.04-arm'}}
    needs:
      - rpm-packaging
    strategy:
      fail-fast: false
      matrix:
        os:
          - {name: fc40, base-image: fedora:40}
          - {name: fc41, base-image: fedora:41}
          - {name: fc42, base-image: fedora:42}
          - {name: ubi8.3, base-image: registry.access.redhat.com/ubi8/ubi:8.3}
          - {name: ubi9.5, base-image: registry.access.redhat.com/ubi9/ubi:9.5}
    container:
      image: ${{ matrix.os.base-image }}
      options: --cap-add=SYS_NICE --cap-add=PERFMON

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          dnf install --setopt=install_weak_deps=False -y nodejs sudo

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'alumet-dev/packaging'
          fetch-depth: 1
          path: 'packaging'

      - name: Download RPM artifact
        id: download_rpm
        uses: actions/download-artifact@v4
        with:
          pattern: '**/*${{ matrix.os.name }}.${{ inputs.arch }}.rpm'
          path: ./rpm
          merge-multiple: true

      - name: Install systemd on Fedora
        if: contains(matrix.os.base-image, 'fedora')
        run: |
          dnf install -y systemd

      - name: Install RPMs
        run: |
          dnf install -y ${{ steps.download_rpm.outputs.download-path }}/*.rpm

      - name: Install Goss
        run: |
          curl -fsSL https://goss.rocks/install | sh

      - name: Run Goss tests
        id: goss-tests
        run: |
          set -o pipefail
          goss -g packaging/.github/goss_validate.yaml validate --format documentation | tee goss-results-rpm-${{ matrix.os.name }}.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload goss report
        if: >-
          always() &&
          steps.goss-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: goss-results-rpm-${{ matrix.os.name }}.txt
          path: |
            ./goss-results-rpm-${{ matrix.os.name }}.txt