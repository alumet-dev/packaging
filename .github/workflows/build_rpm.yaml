---
name: Build RPM pipeline
on:
  workflow_call:
    inputs:
      target-architecture:
        description: 'What is the architecture we want to build for'
        required: true
        type: string
      build-version:
        description: 'What is the version used to build and tag the RPMs'
        required: true
        type: string
      release-version:
        description: 'What is the release version used to build and tag the RPMs'
        required: true
        type: string
      tag:
        description: 'The tag used to checkout the correct version of source code'
        required: false
        type: string
        default: ''


jobs:
  parsing:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.params.outputs.name }}
    steps:

      - uses: actions/checkout@v4
        with:
          repository: alumet-dev/packaging
          fetch-tags: 'true'
          ref: 'ci/create-rpm-package'  # TODO Change on merge
          path: 'packaging'

      - name: Parse alumet version
        id: params
        run: |
          name=$(awk '/Name/ { print $2; exit }' packaging/rpm/specs/alumet.spec)
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "Pipeline will build [$name] in version [${{ inputs.build-version }}] for the architecture [${{ inputs.target-architecture }}]" >> $GITHUB_STEP_SUMMARY

  packaging:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - parsing
    strategy:
      fail-fast: false
      matrix:
        os: ["fedora:40", "fedora:41", "fedora:42", "registry.access.redhat.com/ubi8/ubi:8.3", "registry.access.redhat.com/ubi9/ubi:9.5"]
    env:
      name: ${{ needs.parsing.outputs.name }}
    container:
      image: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v4
        with:
          repository: alumet-dev/packaging
          fetch-tags: 'true'
          ref: 'ci/create-rpm-package'
          path: 'packaging'

      - name: Export good OS version
        run: |
          echo "OS=$(echo ${{ matrix.os }} | awk -F'[/:]' '{print $(NF-1) "." $NF}')" >> $GITHUB_ENV

      - name: Install RPM on Fedora
        if: contains(matrix.os, 'fedora')
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  | sh -s -- -y
          export PATH=$PATH:$HOME/.cargo/bin/
          sudo dnf install rpm-build -y
          sudo dnf install cargo-rpm-macros -y
          sudo dnf install openssl-devel -y

      - name: Install RPM on other than Fedora
        if: ${{ ! contains(matrix.os, 'fedora') }}
        run: |
          mkdir -p /opt/rustup
          mkdir -p /opt/cargo
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  | RUSTUP_HOME=/opt/rustup CARGO_HOME=/opt/cargo sh -s -- -y
          echo 'export PATH=$PATH:/opt/rustup:/opt/cargo/bin' >> ~/.bashrc && source ~/.bashrc
          echo 'export PATH=$PATH:/opt/rustup:/opt/cargo/bin' >> $GITHUB_PATH
          packages=("unzip" "rpm-build" "openssl-devel" "curl" "gcc")
          for package in "${packages[@]}"; do
            if ! yum list installed "$package" >/dev/null 2>&1; then
              yum install -y --allowerasing "$package"
            fi
          done
          rustup default stable

      - name: Setup for alumet
        run: |
          mkdir -p alumet
          mkdir -p /etc/alumet  // TODO Change on merge !!

      - name: Checkout alumet
        uses: actions/checkout@v4
        with:
          # repository: alumet-dev/alumet
          repository: AngeCyp/alumet-testing  # TODO Change on merge
          path: "alumet"
          ref: '${{ inputs.tag }}'

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-targets: "alumet"

      - name: get Spec settings
        id: get-spec-settings
        env:
          build_dir: "$(pwd)/build"
        run: |
          mkdir -p ${{ env.build_dir }}/SOURCES
          tar --exclude=".[^/]*" --exclude="./build" --transform 's|.|alumet|' -zcvf ${{ env.build_dir }}/SOURCES/alumet.tar.gz .
          rpmbuild -ba -vv --define "_topdir ${{ env.build_dir }}" --define "release ${{ inputs.release-version }}" --define "osr ${{ env.OS }}" --define "version ${{ inputs.build-version }}" --define "arch ${{ inputs.target-architecture }}" packaging/rpm/specs/alumet.spec

      - name: Upload artifact local agent
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name }}-agent-${{ inputs.build-version }}-${{ inputs.release-version }}.${{ env.OS }}.${{ inputs.target-architecture }}.rpm
          path: |
            ./build/RPMS/${{ inputs.target-architecture }}/${{ env.name }}-agent-${{ inputs.build-version }}-${{ inputs.release-version }}.${{ env.OS }}.${{ inputs.target-architecture }}.rpm

  test-rpm:
    runs-on: ubuntu-latest
    needs:
      - packaging
    container:
      image: "registry.access.redhat.com/ubi8/ubi:8.3"
      options: --cap-add=SYS_NICE --cap-add=PERFMON

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'alumet-dev/packaging'
          fetch-depth: 1
          path: 'packaging'
          ref: 'ci/create-rpm-package'  # TODO Change on merge !!

      - name: Download RPM artifact
        id: download_rpm
        uses: actions/download-artifact@v4
        with:
          pattern: '**/*8.3*.rpm'
          path: ./rpm
          merge-multiple: true

      - name: Install RPMs
        run: |
          rpm -i ${{ steps.download_rpm.outputs.download-path }}/*.rpm

      - name: Install Goss
        run: |
          curl -fsSL https://goss.rocks/install | sh

      - name: Run Goss tests
        run: |
          goss -g packaging/.github/goss_validate.yaml validate --format documentation | tee goss-results.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload artifact local agent
        uses: actions/upload-artifact@v4
        with:
          name: report_goss.txt
          path: |
            ./goss-results.txt
