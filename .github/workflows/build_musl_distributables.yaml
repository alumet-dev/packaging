---
name: Build musl for cross-platform

on:
  workflow_call:
    inputs:
      arch:
        description: "Architecture we want to build for"
        required: true
        type: string

      version:
        description: "Application version (version of the alumet agent)"
        required: true
        type: string

      revision:
        description: "Package revision number (increase it when you update the package with the same app version)"
        required: true
        type: string

      tag:
        description: "The tag used to checkout the correct version of source code"
        required: false
        type: string
        default: "main"

      rust-version:
        description: "Version of Rust to compile Alumet with"
        type: string
        default: '1.85.1'
env:
  pkg_name: alumet-agent
  os_name: ubuntu:24.04

jobs:
  bin-packaging:
    runs-on: ubuntu-latest

    container:
      # We use musl to deliver to all platforms via deb and rpm
      image: ${{ env.os_name }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install nodejs

      - uses: actions/checkout@v4
        with:
          repository: alumet-dev/packaging
          fetch-tags: true
          path: packaging

      - name: Install dependencies
        shell: bash
        run: |
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl build-essential devscripts debhelper libssl-dev pkg-config 
          if [[ ${{ inputs.arch }} == "aarch64" ]]; then
            apt-get install -y gcc-aarch64-linux-gnu
          else
            apt-get install -y musl-tools
          fi

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  | sh -s -- -y --profile minimal --default-toolchain ${{ inputs.rust-version }} --target ${{ inputs.arch }}-unknown-linux-musl

      - name: Setup for alumet sources
        run: mkdir -p alumet

      - name: Checkout alumet repo
        uses: actions/checkout@v4
        with:
          repository: alumet-dev/alumet
          path: "alumet"
          ref: "${{ inputs.tag }}"
          fetch-depth: 1
          fetch-tags: true

      - name: Compile Alumet agent
        working-directory: alumet
        run: |
          . "$HOME/.cargo/env"
          bin=$(pwd)/bin
          mkdir "$bin"
          if [[ ${{ inputs.arch }} == "aarch64" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc 
            export CC=aarch64-linux-gnu-gcc
          fi
          CARGO_TARGET_DIR="$bin" ALUMET_AGENT_RELEASE=true RUSTFLAGS="-Awarnings"  cargo build --release -p alumet-agent --target ${{ inputs.arch }}-unknown-linux-musl
          cp "$bin/${{ inputs.arch }}-unknown-linux-musl/release/alumet-agent" ../packaging/bin/${{ inputs.arch }}/

      - name: Upload bin artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.arch }}-alumet-agent
          path: packaging/bin/${{ inputs.arch }}/alumet-agent
          compression-level: 0  # the package is already compressed

  deb-packaging:
    runs-on: ubuntu-latest
    needs: 
      - bin-package
    env:
      ARCH: ${{ (inputs.arch == 'x86_64') && 'amd64' || inputs.arch }}
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            "debian:11",
            "debian:12",
            "ubuntu:20.04",
            "ubuntu:22.04",
            "ubuntu:24.04",
          ]
    container:
      image: ${{ env.os_name }}

    defaults:
      run:
        shell: bash
    steps:
      - name: Download bin artifact
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: ./packaging
          merge-multiple: true

      # replace some forbidden characters with ~
      # also replace - by ~ because we want 1.2.3-defbcda to be sorted BEFORE 1.2.3
      - name: Normalize version number
        run: |
          export PKG_VERSION=$(echo ${{ inputs.version }} | sed 's/[_-]/~/g')
          echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV
          echo "PKG_VERSION=$PKG_VERSION"

      - name: Setup GITHUB_ENV
        run: |
          echo "OS_NAME=$(grep '^ID=' "/etc/os-release" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_ENV
          echo "OS_VERSION=$(grep '^VERSION_ID=' "/etc/os-release" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_ENV

      - name: Build debian package
        working-directory: packaging/deb/
        run: |
          cp ../bin/${{ inputs.arch }}/alumet-agent .
          PKG_VERSION=${{ env.PKG_VERSION }} PKG_REVISION=${{ inputs.revision }} ./build-package.sh 
      
      - name: Define final package file name
        id: define_package_filename
        run: |
          echo "PACKAGE_FILENAME=${{ env.pkg_name }}_${{ env.PKG_VERSION }}-${{ inputs.revision }}_${{ env.ARCH }}_${{ env.OS_NAME }}_${{ env.OS_VERSION }}.deb" >> $GITHUB_OUTPUT

      - name: Rename package file
        run: mv ${{ env.pkg_name }}_${{ env.PKG_VERSION }}-${{ inputs.revision }}_${{ env.ARCH }}.deb ${{ steps.define_package_filename.outputs.PACKAGE_FILENAME }}
        working-directory: packaging

      # Run lintian with --fail-on error, but that option don't exist on old distribs.
      # Lintian on Debian 11 has incorrect rules: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=992465.
      - name: Check package against Debian rules
        if: matrix.os != 'debian:11' && matrix.os != 'ubuntu:20.04'
        run: lintian --fail-on error --suppress-tags unstripped-binary-or-object ${{ steps.define_package_filename.outputs.PACKAGE_FILENAME }}
        working-directory: packaging

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.define_package_filename.outputs.PACKAGE_FILENAME }}
          path: packaging/${{ steps.define_package_filename.outputs.PACKAGE_FILENAME }}
          compression-level: 0  # the package is already compressed

  rpm-packaging:
    runs-on: ubuntu-latest
    container:
      # We use musl to deliver to all platforms via deb and rpm
      image: ${{ env.os_name }}

    defaults:
      run:
        shell: bash
    needs: 
      - bin-package
    steps:
      - name: Download bin artifact
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: ./packaging
          merge-multiple: true

      - name: Install dependencies
        shell: bash
        run: |
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y rpm

      - name: Build RPM package
        id: build-rpm-package
        env:
          build_dir: "$(pwd)/build"
          source_dir: "$(pwd)/SOURCES"
        working-directory: packaging/rpm
        run: |
          cp ../bin/${{ inputs.arch }}/alumet-agent SOURCES/alumet-agent
          rpmbuild -bb -vv --define "_topdir ${{ env.build_dir }}" --define "_sourcedir ${{ env.source_dir }}" --define "_libdir /usr/lib" --define "version ${{ env.PKG_VERSION }}" --define "release ${{ inputs.release-version }}" --define "osr ${{ matrix.os.name }}" --define "arch ${{ inputs.arch }}" SPECS/alumet.spec
          export FILENAME="${{ env.pkg_name }}-${{ env.PKG_VERSION }}-${{ inputs.release-version }}.${{ matrix.os.name }}.${{ inputs.arch }}.rpm"
          echo "PACKAGE_FILENAME=$FILENAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_PATH=$(pwd)/build/RPMS/${{ inputs.arch }}/$FILENAME" >> $GITHUB_OUTPUT

      - name: Upload artifact alumet-agent
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-rpm-package.outputs.PACKAGE_FILENAME }}
          path: ${{ steps.build-rpm-package.outputs.PACKAGE_PATH }}
          compression-level: 0  # the package is already compressed

  deb-testing:
    needs: deb-packaging
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: "11", base-image: debian:11 }
          - { name: "12", base-image: debian:12 }
          - { name: "20.04", base-image: ubuntu:20.04 }
          - { name: "22.04", base-image: ubuntu:22.04 }
          - { name: "24.04", base-image: ubuntu:24.04 }

    container:
      image: ${{ matrix.os.base-image }}
      options: --cap-add=SYS_NICE --cap-add=PERFMON

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install nodejs

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: "alumet-dev/packaging"
          fetch-depth: 1
          path: "packaging"

      - name: Download DEB artifact
        id: download_deb
        uses: actions/download-artifact@v4
        with:
          pattern: "**/*${{ matrix.os.name }}*.deb"
          path: ./deb
          merge-multiple: true

      - name: Install DEBs
        run: |
          apt-get update
          deb_file=$(find ${{ steps.download_deb.outputs.download-path }} -name "*.deb" -print -quit)
          DEBIAN_FRONTEND=noninteractive apt-get install -y curl
          DEBIAN_FRONTEND=noninteractive apt-get install -y "$deb_file"

      - name: Install Goss
        run: |
          curl -fsSL https://goss.rocks/install | sh

      - name: Run Goss tests
        id: goss-tests
        run: |
          set -e pipefail
          goss -g packaging/.github/goss_validate.yaml validate --format documentation | tee goss-results-deb-${{ matrix.os.name }}.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload goss report
        if: >-
          always() &&
          steps.goss-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: goss-results-deb-${{ matrix.os.name }}.txt
          path: |
            ./goss-results-deb-${{ matrix.os.name }}.txt


  rpm-testing:
    runs-on: ubuntu-latest
    needs:
      - rpm-packaging
    strategy:
      fail-fast: false
      matrix:
        os:
          - {name: fc40, base-image: fedora:40}
          - {name: fc41, base-image: fedora:41}
          - {name: fc42, base-image: fedora:42}
          - {name: ubi8.3, base-image: registry.access.redhat.com/ubi8/ubi:8.3}
          - {name: ubi9.5, base-image: registry.access.redhat.com/ubi9/ubi:9.5}
    container:
      image: ${{ matrix.os.base-image }}
      options: --cap-add=SYS_NICE --cap-add=PERFMON

    steps:
      - name: Install Act dependencies
        if: ${{ env.ACT }}
        run: |
          dnf install --setopt=install_weak_deps=False -y nodejs sudo

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'alumet-dev/packaging'
          fetch-depth: 1
          path: 'packaging'

      - name: Download RPM artifact
        id: download_rpm
        uses: actions/download-artifact@v4
        with:
          pattern: '**/*${{ matrix.os.name }}*.rpm'
          path: ./rpm
          merge-multiple: true

      - name: Install systemd on Fedora
        if: contains(matrix.os.base-image, 'fedora')
        run: |
          dnf install -y systemd

      - name: Install RPMs
        run: |
          dnf install -y ${{ steps.download_rpm.outputs.download-path }}/*.rpm

      - name: Install Goss
        run: |
          curl -fsSL https://goss.rocks/install | sh

      - name: Run Goss tests
        id: goss-tests
        run: |
          set -o pipefail
          goss -g packaging/.github/goss_validate.yaml validate --format documentation | tee goss-results-rpm-${{ matrix.os.name }}.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload goss report
        if: >-
          always() &&
          steps.goss-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: goss-results-rpm-${{ matrix.os.name }}.txt
          path: |
            ./goss-results-rpm-${{ matrix.os.name }}.txt
